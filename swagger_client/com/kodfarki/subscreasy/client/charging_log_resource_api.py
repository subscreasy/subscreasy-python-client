# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ChargingLogResourceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_charging_log_using_post(self, charging_log, **kwargs):  # noqa: E501
        """createChargingLog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_charging_log_using_post(charging_log, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChargingLog charging_log: chargingLog (required)
        :return: ChargingLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_charging_log_using_post_with_http_info(charging_log, **kwargs)  # noqa: E501
        else:
            (data) = self.create_charging_log_using_post_with_http_info(charging_log, **kwargs)  # noqa: E501
            return data

    def create_charging_log_using_post_with_http_info(self, charging_log, **kwargs):  # noqa: E501
        """createChargingLog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_charging_log_using_post_with_http_info(charging_log, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChargingLog charging_log: chargingLog (required)
        :return: ChargingLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['charging_log']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_charging_log_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'charging_log' is set
        if ('charging_log' not in params or
                params['charging_log'] is None):
            raise ValueError("Missing the required parameter `charging_log` when calling `create_charging_log_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'charging_log' in params:
            body_params = params['charging_log']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/charging-logs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChargingLog',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_charging_log_using_delete(self, id, **kwargs):  # noqa: E501
        """deleteChargingLog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_charging_log_using_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_charging_log_using_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_charging_log_using_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_charging_log_using_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """deleteChargingLog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_charging_log_using_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_charging_log_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_charging_log_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/charging-logs/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_charging_logs_using_get(self, **kwargs):  # noqa: E501
        """getAllChargingLogs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_charging_logs_using_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: Page number of the requested page
        :param int size: Size of a page
        :param list[str] sort: Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: list[ChargingLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_all_charging_logs_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_charging_logs_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_charging_logs_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """getAllChargingLogs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_charging_logs_using_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: Page number of the requested page
        :param int size: Size of a page
        :param list[str] sort: Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: list[ChargingLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'size', 'sort']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_charging_logs_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/charging-logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ChargingLog]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_charging_log_using_get(self, id, **kwargs):  # noqa: E501
        """getChargingLog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_charging_log_using_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: id (required)
        :return: ChargingLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_charging_log_using_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_charging_log_using_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_charging_log_using_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """getChargingLog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_charging_log_using_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: id (required)
        :return: ChargingLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_charging_log_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_charging_log_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/charging-logs/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChargingLog',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def refund_using_post(self, charging_log_id, **kwargs):  # noqa: E501
        """refund  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.refund_using_post(charging_log_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int charging_log_id: chargingLogId (required)
        :return: ChargingLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.refund_using_post_with_http_info(charging_log_id, **kwargs)  # noqa: E501
        else:
            (data) = self.refund_using_post_with_http_info(charging_log_id, **kwargs)  # noqa: E501
            return data

    def refund_using_post_with_http_info(self, charging_log_id, **kwargs):  # noqa: E501
        """refund  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.refund_using_post_with_http_info(charging_log_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int charging_log_id: chargingLogId (required)
        :return: ChargingLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['charging_log_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refund_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'charging_log_id' is set
        if ('charging_log_id' not in params or
                params['charging_log_id'] is None):
            raise ValueError("Missing the required parameter `charging_log_id` when calling `refund_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'charging_log_id' in params:
            path_params['chargingLogId'] = params['charging_log_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/charging-logs/refund/{chargingLogId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChargingLog',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_charging_log_using_put(self, charging_log, **kwargs):  # noqa: E501
        """updateChargingLog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_charging_log_using_put(charging_log, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChargingLog charging_log: chargingLog (required)
        :return: ChargingLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_charging_log_using_put_with_http_info(charging_log, **kwargs)  # noqa: E501
        else:
            (data) = self.update_charging_log_using_put_with_http_info(charging_log, **kwargs)  # noqa: E501
            return data

    def update_charging_log_using_put_with_http_info(self, charging_log, **kwargs):  # noqa: E501
        """updateChargingLog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_charging_log_using_put_with_http_info(charging_log, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChargingLog charging_log: chargingLog (required)
        :return: ChargingLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['charging_log']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_charging_log_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'charging_log' is set
        if ('charging_log' not in params or
                params['charging_log'] is None):
            raise ValueError("Missing the required parameter `charging_log` when calling `update_charging_log_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'charging_log' in params:
            body_params = params['charging_log']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/charging-logs', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChargingLog',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
