# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProfileInfoVM(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_profiles': 'list[str]',
        'ribbon_env': 'str'
    }

    attribute_map = {
        'active_profiles': 'activeProfiles',
        'ribbon_env': 'ribbonEnv'
    }

    def __init__(self, active_profiles=None, ribbon_env=None):  # noqa: E501
        """ProfileInfoVM - a model defined in Swagger"""  # noqa: E501

        self._active_profiles = None
        self._ribbon_env = None
        self.discriminator = None

        if active_profiles is not None:
            self.active_profiles = active_profiles
        if ribbon_env is not None:
            self.ribbon_env = ribbon_env

    @property
    def active_profiles(self):
        """Gets the active_profiles of this ProfileInfoVM.  # noqa: E501


        :return: The active_profiles of this ProfileInfoVM.  # noqa: E501
        :rtype: list[str]
        """
        return self._active_profiles

    @active_profiles.setter
    def active_profiles(self, active_profiles):
        """Sets the active_profiles of this ProfileInfoVM.


        :param active_profiles: The active_profiles of this ProfileInfoVM.  # noqa: E501
        :type: list[str]
        """

        self._active_profiles = active_profiles

    @property
    def ribbon_env(self):
        """Gets the ribbon_env of this ProfileInfoVM.  # noqa: E501


        :return: The ribbon_env of this ProfileInfoVM.  # noqa: E501
        :rtype: str
        """
        return self._ribbon_env

    @ribbon_env.setter
    def ribbon_env(self, ribbon_env):
        """Sets the ribbon_env of this ProfileInfoVM.


        :param ribbon_env: The ribbon_env of this ProfileInfoVM.  # noqa: E501
        :type: str
        """

        self._ribbon_env = ribbon_env

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileInfoVM):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
