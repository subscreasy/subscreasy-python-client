# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RecurrencePeriod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'length': 'int',
        'recurrence_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'length': 'length',
        'recurrence_type': 'recurrenceType'
    }

    def __init__(self, id=None, length=None, recurrence_type=None):  # noqa: E501
        """RecurrencePeriod - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._length = None
        self._recurrence_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.length = length
        self.recurrence_type = recurrence_type

    @property
    def id(self):
        """Gets the id of this RecurrencePeriod.  # noqa: E501


        :return: The id of this RecurrencePeriod.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecurrencePeriod.


        :param id: The id of this RecurrencePeriod.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def length(self):
        """Gets the length of this RecurrencePeriod.  # noqa: E501


        :return: The length of this RecurrencePeriod.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this RecurrencePeriod.


        :param length: The length of this RecurrencePeriod.  # noqa: E501
        :type: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")  # noqa: E501

        self._length = length

    @property
    def recurrence_type(self):
        """Gets the recurrence_type of this RecurrencePeriod.  # noqa: E501


        :return: The recurrence_type of this RecurrencePeriod.  # noqa: E501
        :rtype: str
        """
        return self._recurrence_type

    @recurrence_type.setter
    def recurrence_type(self, recurrence_type):
        """Sets the recurrence_type of this RecurrencePeriod.


        :param recurrence_type: The recurrence_type of this RecurrencePeriod.  # noqa: E501
        :type: str
        """
        if recurrence_type is None:
            raise ValueError("Invalid value for `recurrence_type`, must not be `None`")  # noqa: E501
        allowed_values = ["SECONDLY", "MINUTELY", "HOURLY", "DAILY", "WEEKLY", "MONTHLY", "YEARLY"]  # noqa: E501
        if recurrence_type not in allowed_values:
            raise ValueError(
                "Invalid value for `recurrence_type` ({0}), must be one of {1}"  # noqa: E501
                .format(recurrence_type, allowed_values)
            )

        self._recurrence_type = recurrence_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecurrencePeriod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
