# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.com.kodfarki.subscreasy.client.model.company import Company  # noqa: F401,E501


class Coupon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'company': 'Company',
        'current_usage': 'int',
        'discount_amount': 'float',
        'discount_type': 'str',
        'expire_date': 'datetime',
        'id': 'int',
        'max_limit': 'int'
    }

    attribute_map = {
        'code': 'code',
        'company': 'company',
        'current_usage': 'currentUsage',
        'discount_amount': 'discountAmount',
        'discount_type': 'discountType',
        'expire_date': 'expireDate',
        'id': 'id',
        'max_limit': 'maxLimit'
    }

    def __init__(self, code=None, company=None, current_usage=None, discount_amount=None, discount_type=None, expire_date=None, id=None, max_limit=None):  # noqa: E501
        """Coupon - a model defined in Swagger"""  # noqa: E501

        self._code = None
        self._company = None
        self._current_usage = None
        self._discount_amount = None
        self._discount_type = None
        self._expire_date = None
        self._id = None
        self._max_limit = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if company is not None:
            self.company = company
        if current_usage is not None:
            self.current_usage = current_usage
        self.discount_amount = discount_amount
        self.discount_type = discount_type
        if expire_date is not None:
            self.expire_date = expire_date
        if id is not None:
            self.id = id
        self.max_limit = max_limit

    @property
    def code(self):
        """Gets the code of this Coupon.  # noqa: E501


        :return: The code of this Coupon.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Coupon.


        :param code: The code of this Coupon.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def company(self):
        """Gets the company of this Coupon.  # noqa: E501


        :return: The company of this Coupon.  # noqa: E501
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Coupon.


        :param company: The company of this Coupon.  # noqa: E501
        :type: Company
        """

        self._company = company

    @property
    def current_usage(self):
        """Gets the current_usage of this Coupon.  # noqa: E501


        :return: The current_usage of this Coupon.  # noqa: E501
        :rtype: int
        """
        return self._current_usage

    @current_usage.setter
    def current_usage(self, current_usage):
        """Sets the current_usage of this Coupon.


        :param current_usage: The current_usage of this Coupon.  # noqa: E501
        :type: int
        """

        self._current_usage = current_usage

    @property
    def discount_amount(self):
        """Gets the discount_amount of this Coupon.  # noqa: E501


        :return: The discount_amount of this Coupon.  # noqa: E501
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this Coupon.


        :param discount_amount: The discount_amount of this Coupon.  # noqa: E501
        :type: float
        """
        if discount_amount is None:
            raise ValueError("Invalid value for `discount_amount`, must not be `None`")  # noqa: E501

        self._discount_amount = discount_amount

    @property
    def discount_type(self):
        """Gets the discount_type of this Coupon.  # noqa: E501


        :return: The discount_type of this Coupon.  # noqa: E501
        :rtype: str
        """
        return self._discount_type

    @discount_type.setter
    def discount_type(self, discount_type):
        """Sets the discount_type of this Coupon.


        :param discount_type: The discount_type of this Coupon.  # noqa: E501
        :type: str
        """
        if discount_type is None:
            raise ValueError("Invalid value for `discount_type`, must not be `None`")  # noqa: E501
        allowed_values = ["FIXED", "PERCENTAGE"]  # noqa: E501
        if discount_type not in allowed_values:
            raise ValueError(
                "Invalid value for `discount_type` ({0}), must be one of {1}"  # noqa: E501
                .format(discount_type, allowed_values)
            )

        self._discount_type = discount_type

    @property
    def expire_date(self):
        """Gets the expire_date of this Coupon.  # noqa: E501


        :return: The expire_date of this Coupon.  # noqa: E501
        :rtype: datetime
        """
        return self._expire_date

    @expire_date.setter
    def expire_date(self, expire_date):
        """Sets the expire_date of this Coupon.


        :param expire_date: The expire_date of this Coupon.  # noqa: E501
        :type: datetime
        """

        self._expire_date = expire_date

    @property
    def id(self):
        """Gets the id of this Coupon.  # noqa: E501


        :return: The id of this Coupon.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Coupon.


        :param id: The id of this Coupon.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def max_limit(self):
        """Gets the max_limit of this Coupon.  # noqa: E501


        :return: The max_limit of this Coupon.  # noqa: E501
        :rtype: int
        """
        return self._max_limit

    @max_limit.setter
    def max_limit(self, max_limit):
        """Sets the max_limit of this Coupon.


        :param max_limit: The max_limit of this Coupon.  # noqa: E501
        :type: int
        """
        if max_limit is None:
            raise ValueError("Invalid value for `max_limit`, must not be `None`")  # noqa: E501

        self._max_limit = max_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Coupon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
