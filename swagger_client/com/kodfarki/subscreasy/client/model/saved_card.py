# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SavedCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bin_number': 'str',
        'card_alias': 'str',
        'card_association': 'str',
        'card_bank_code': 'int',
        'card_bank_name': 'str',
        'card_family': 'str',
        'card_token': 'str',
        'card_user_key': 'str',
        'cart_type': 'str',
        'id': 'int'
    }

    attribute_map = {
        'bin_number': 'binNumber',
        'card_alias': 'cardAlias',
        'card_association': 'cardAssociation',
        'card_bank_code': 'cardBankCode',
        'card_bank_name': 'cardBankName',
        'card_family': 'cardFamily',
        'card_token': 'cardToken',
        'card_user_key': 'cardUserKey',
        'cart_type': 'cartType',
        'id': 'id'
    }

    def __init__(self, bin_number=None, card_alias=None, card_association=None, card_bank_code=None, card_bank_name=None, card_family=None, card_token=None, card_user_key=None, cart_type=None, id=None):  # noqa: E501
        """SavedCard - a model defined in Swagger"""  # noqa: E501

        self._bin_number = None
        self._card_alias = None
        self._card_association = None
        self._card_bank_code = None
        self._card_bank_name = None
        self._card_family = None
        self._card_token = None
        self._card_user_key = None
        self._cart_type = None
        self._id = None
        self.discriminator = None

        if bin_number is not None:
            self.bin_number = bin_number
        if card_alias is not None:
            self.card_alias = card_alias
        if card_association is not None:
            self.card_association = card_association
        if card_bank_code is not None:
            self.card_bank_code = card_bank_code
        if card_bank_name is not None:
            self.card_bank_name = card_bank_name
        if card_family is not None:
            self.card_family = card_family
        if card_token is not None:
            self.card_token = card_token
        if card_user_key is not None:
            self.card_user_key = card_user_key
        if cart_type is not None:
            self.cart_type = cart_type
        if id is not None:
            self.id = id

    @property
    def bin_number(self):
        """Gets the bin_number of this SavedCard.  # noqa: E501


        :return: The bin_number of this SavedCard.  # noqa: E501
        :rtype: str
        """
        return self._bin_number

    @bin_number.setter
    def bin_number(self, bin_number):
        """Sets the bin_number of this SavedCard.


        :param bin_number: The bin_number of this SavedCard.  # noqa: E501
        :type: str
        """

        self._bin_number = bin_number

    @property
    def card_alias(self):
        """Gets the card_alias of this SavedCard.  # noqa: E501


        :return: The card_alias of this SavedCard.  # noqa: E501
        :rtype: str
        """
        return self._card_alias

    @card_alias.setter
    def card_alias(self, card_alias):
        """Sets the card_alias of this SavedCard.


        :param card_alias: The card_alias of this SavedCard.  # noqa: E501
        :type: str
        """

        self._card_alias = card_alias

    @property
    def card_association(self):
        """Gets the card_association of this SavedCard.  # noqa: E501


        :return: The card_association of this SavedCard.  # noqa: E501
        :rtype: str
        """
        return self._card_association

    @card_association.setter
    def card_association(self, card_association):
        """Sets the card_association of this SavedCard.


        :param card_association: The card_association of this SavedCard.  # noqa: E501
        :type: str
        """

        self._card_association = card_association

    @property
    def card_bank_code(self):
        """Gets the card_bank_code of this SavedCard.  # noqa: E501


        :return: The card_bank_code of this SavedCard.  # noqa: E501
        :rtype: int
        """
        return self._card_bank_code

    @card_bank_code.setter
    def card_bank_code(self, card_bank_code):
        """Sets the card_bank_code of this SavedCard.


        :param card_bank_code: The card_bank_code of this SavedCard.  # noqa: E501
        :type: int
        """

        self._card_bank_code = card_bank_code

    @property
    def card_bank_name(self):
        """Gets the card_bank_name of this SavedCard.  # noqa: E501


        :return: The card_bank_name of this SavedCard.  # noqa: E501
        :rtype: str
        """
        return self._card_bank_name

    @card_bank_name.setter
    def card_bank_name(self, card_bank_name):
        """Sets the card_bank_name of this SavedCard.


        :param card_bank_name: The card_bank_name of this SavedCard.  # noqa: E501
        :type: str
        """

        self._card_bank_name = card_bank_name

    @property
    def card_family(self):
        """Gets the card_family of this SavedCard.  # noqa: E501


        :return: The card_family of this SavedCard.  # noqa: E501
        :rtype: str
        """
        return self._card_family

    @card_family.setter
    def card_family(self, card_family):
        """Sets the card_family of this SavedCard.


        :param card_family: The card_family of this SavedCard.  # noqa: E501
        :type: str
        """

        self._card_family = card_family

    @property
    def card_token(self):
        """Gets the card_token of this SavedCard.  # noqa: E501


        :return: The card_token of this SavedCard.  # noqa: E501
        :rtype: str
        """
        return self._card_token

    @card_token.setter
    def card_token(self, card_token):
        """Sets the card_token of this SavedCard.


        :param card_token: The card_token of this SavedCard.  # noqa: E501
        :type: str
        """

        self._card_token = card_token

    @property
    def card_user_key(self):
        """Gets the card_user_key of this SavedCard.  # noqa: E501


        :return: The card_user_key of this SavedCard.  # noqa: E501
        :rtype: str
        """
        return self._card_user_key

    @card_user_key.setter
    def card_user_key(self, card_user_key):
        """Sets the card_user_key of this SavedCard.


        :param card_user_key: The card_user_key of this SavedCard.  # noqa: E501
        :type: str
        """

        self._card_user_key = card_user_key

    @property
    def cart_type(self):
        """Gets the cart_type of this SavedCard.  # noqa: E501


        :return: The cart_type of this SavedCard.  # noqa: E501
        :rtype: str
        """
        return self._cart_type

    @cart_type.setter
    def cart_type(self, cart_type):
        """Sets the cart_type of this SavedCard.


        :param cart_type: The cart_type of this SavedCard.  # noqa: E501
        :type: str
        """

        self._cart_type = cart_type

    @property
    def id(self):
        """Gets the id of this SavedCard.  # noqa: E501


        :return: The id of this SavedCard.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SavedCard.


        :param id: The id of this SavedCard.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavedCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
