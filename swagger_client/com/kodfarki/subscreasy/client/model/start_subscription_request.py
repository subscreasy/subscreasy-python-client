# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.com.kodfarki.subscreasy.client.model.payment_card import PaymentCard  # noqa: F401,E501
from swagger_client.com.kodfarki.subscreasy.client.model.subscriber import Subscriber  # noqa: F401,E501
from swagger_client.com.kodfarki.subscreasy.client.model.subscription_plan import SubscriptionPlan  # noqa: F401,E501


class StartSubscriptionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_key': 'str',
        'callback_url': 'str',
        'coupon_code': 'str',
        'offer': 'SubscriptionPlan',
        'payment_card': 'PaymentCard',
        'subscriber': 'Subscriber'
    }

    attribute_map = {
        'api_key': 'apiKey',
        'callback_url': 'callbackUrl',
        'coupon_code': 'couponCode',
        'offer': 'offer',
        'payment_card': 'paymentCard',
        'subscriber': 'subscriber'
    }

    def __init__(self, api_key=None, callback_url=None, coupon_code=None, offer=None, payment_card=None, subscriber=None):  # noqa: E501
        """StartSubscriptionRequest - a model defined in Swagger"""  # noqa: E501

        self._api_key = None
        self._callback_url = None
        self._coupon_code = None
        self._offer = None
        self._payment_card = None
        self._subscriber = None
        self.discriminator = None

        if api_key is not None:
            self.api_key = api_key
        if callback_url is not None:
            self.callback_url = callback_url
        if coupon_code is not None:
            self.coupon_code = coupon_code
        if offer is not None:
            self.offer = offer
        if payment_card is not None:
            self.payment_card = payment_card
        if subscriber is not None:
            self.subscriber = subscriber

    @property
    def api_key(self):
        """Gets the api_key of this StartSubscriptionRequest.  # noqa: E501


        :return: The api_key of this StartSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this StartSubscriptionRequest.


        :param api_key: The api_key of this StartSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def callback_url(self):
        """Gets the callback_url of this StartSubscriptionRequest.  # noqa: E501


        :return: The callback_url of this StartSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this StartSubscriptionRequest.


        :param callback_url: The callback_url of this StartSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._callback_url = callback_url

    @property
    def coupon_code(self):
        """Gets the coupon_code of this StartSubscriptionRequest.  # noqa: E501


        :return: The coupon_code of this StartSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._coupon_code

    @coupon_code.setter
    def coupon_code(self, coupon_code):
        """Sets the coupon_code of this StartSubscriptionRequest.


        :param coupon_code: The coupon_code of this StartSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._coupon_code = coupon_code

    @property
    def offer(self):
        """Gets the offer of this StartSubscriptionRequest.  # noqa: E501


        :return: The offer of this StartSubscriptionRequest.  # noqa: E501
        :rtype: SubscriptionPlan
        """
        return self._offer

    @offer.setter
    def offer(self, offer):
        """Sets the offer of this StartSubscriptionRequest.


        :param offer: The offer of this StartSubscriptionRequest.  # noqa: E501
        :type: SubscriptionPlan
        """

        self._offer = offer

    @property
    def payment_card(self):
        """Gets the payment_card of this StartSubscriptionRequest.  # noqa: E501


        :return: The payment_card of this StartSubscriptionRequest.  # noqa: E501
        :rtype: PaymentCard
        """
        return self._payment_card

    @payment_card.setter
    def payment_card(self, payment_card):
        """Sets the payment_card of this StartSubscriptionRequest.


        :param payment_card: The payment_card of this StartSubscriptionRequest.  # noqa: E501
        :type: PaymentCard
        """

        self._payment_card = payment_card

    @property
    def subscriber(self):
        """Gets the subscriber of this StartSubscriptionRequest.  # noqa: E501


        :return: The subscriber of this StartSubscriptionRequest.  # noqa: E501
        :rtype: Subscriber
        """
        return self._subscriber

    @subscriber.setter
    def subscriber(self, subscriber):
        """Sets the subscriber of this StartSubscriptionRequest.


        :param subscriber: The subscriber of this StartSubscriptionRequest.  # noqa: E501
        :type: Subscriber
        """

        self._subscriber = subscriber

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StartSubscriptionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
