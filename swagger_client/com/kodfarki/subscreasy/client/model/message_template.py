# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.com.kodfarki.subscreasy.client.model.company import Company  # noqa: F401,E501


class MessageTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company': 'Company',
        'enabled': 'bool',
        'event_type': 'str',
        'id': 'int',
        'message_template': 'str',
        'notification_type': 'str',
        'sender': 'str',
        'subject': 'str'
    }

    attribute_map = {
        'company': 'company',
        'enabled': 'enabled',
        'event_type': 'eventType',
        'id': 'id',
        'message_template': 'messageTemplate',
        'notification_type': 'notificationType',
        'sender': 'sender',
        'subject': 'subject'
    }

    def __init__(self, company=None, enabled=None, event_type=None, id=None, message_template=None, notification_type=None, sender=None, subject=None):  # noqa: E501
        """MessageTemplate - a model defined in Swagger"""  # noqa: E501

        self._company = None
        self._enabled = None
        self._event_type = None
        self._id = None
        self._message_template = None
        self._notification_type = None
        self._sender = None
        self._subject = None
        self.discriminator = None

        self.company = company
        if enabled is not None:
            self.enabled = enabled
        if event_type is not None:
            self.event_type = event_type
        if id is not None:
            self.id = id
        if message_template is not None:
            self.message_template = message_template
        if notification_type is not None:
            self.notification_type = notification_type
        if sender is not None:
            self.sender = sender
        if subject is not None:
            self.subject = subject

    @property
    def company(self):
        """Gets the company of this MessageTemplate.  # noqa: E501


        :return: The company of this MessageTemplate.  # noqa: E501
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this MessageTemplate.


        :param company: The company of this MessageTemplate.  # noqa: E501
        :type: Company
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")  # noqa: E501

        self._company = company

    @property
    def enabled(self):
        """Gets the enabled of this MessageTemplate.  # noqa: E501


        :return: The enabled of this MessageTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this MessageTemplate.


        :param enabled: The enabled of this MessageTemplate.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def event_type(self):
        """Gets the event_type of this MessageTemplate.  # noqa: E501


        :return: The event_type of this MessageTemplate.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this MessageTemplate.


        :param event_type: The event_type of this MessageTemplate.  # noqa: E501
        :type: str
        """
        allowed_values = ["STARTED", "RENEWED", "FINISHED", "CANCELLED"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def id(self):
        """Gets the id of this MessageTemplate.  # noqa: E501


        :return: The id of this MessageTemplate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageTemplate.


        :param id: The id of this MessageTemplate.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def message_template(self):
        """Gets the message_template of this MessageTemplate.  # noqa: E501


        :return: The message_template of this MessageTemplate.  # noqa: E501
        :rtype: str
        """
        return self._message_template

    @message_template.setter
    def message_template(self, message_template):
        """Sets the message_template of this MessageTemplate.


        :param message_template: The message_template of this MessageTemplate.  # noqa: E501
        :type: str
        """

        self._message_template = message_template

    @property
    def notification_type(self):
        """Gets the notification_type of this MessageTemplate.  # noqa: E501


        :return: The notification_type of this MessageTemplate.  # noqa: E501
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this MessageTemplate.


        :param notification_type: The notification_type of this MessageTemplate.  # noqa: E501
        :type: str
        """
        allowed_values = ["WEBHOOK", "EMAIL"]  # noqa: E501
        if notification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_type` ({0}), must be one of {1}"  # noqa: E501
                .format(notification_type, allowed_values)
            )

        self._notification_type = notification_type

    @property
    def sender(self):
        """Gets the sender of this MessageTemplate.  # noqa: E501


        :return: The sender of this MessageTemplate.  # noqa: E501
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this MessageTemplate.


        :param sender: The sender of this MessageTemplate.  # noqa: E501
        :type: str
        """

        self._sender = sender

    @property
    def subject(self):
        """Gets the subject of this MessageTemplate.  # noqa: E501


        :return: The subject of this MessageTemplate.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this MessageTemplate.


        :param subject: The subject of this MessageTemplate.  # noqa: E501
        :type: str
        """

        self._subject = subject

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
