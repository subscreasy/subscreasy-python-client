# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_alias': 'str',
        'card_expiry': 'str',
        'card_holder_name': 'str',
        'card_number': 'str',
        'card_token': 'str',
        'card_user_key': 'str',
        'cvc': 'str',
        'expire_month': 'str',
        'expire_year': 'str',
        'register_card': 'int'
    }

    attribute_map = {
        'card_alias': 'cardAlias',
        'card_expiry': 'cardExpiry',
        'card_holder_name': 'cardHolderName',
        'card_number': 'cardNumber',
        'card_token': 'cardToken',
        'card_user_key': 'cardUserKey',
        'cvc': 'cvc',
        'expire_month': 'expireMonth',
        'expire_year': 'expireYear',
        'register_card': 'registerCard'
    }

    def __init__(self, card_alias=None, card_expiry=None, card_holder_name=None, card_number=None, card_token=None, card_user_key=None, cvc=None, expire_month=None, expire_year=None, register_card=None):  # noqa: E501
        """PaymentCard - a model defined in Swagger"""  # noqa: E501

        self._card_alias = None
        self._card_expiry = None
        self._card_holder_name = None
        self._card_number = None
        self._card_token = None
        self._card_user_key = None
        self._cvc = None
        self._expire_month = None
        self._expire_year = None
        self._register_card = None
        self.discriminator = None

        if card_alias is not None:
            self.card_alias = card_alias
        if card_expiry is not None:
            self.card_expiry = card_expiry
        if card_holder_name is not None:
            self.card_holder_name = card_holder_name
        if card_number is not None:
            self.card_number = card_number
        if card_token is not None:
            self.card_token = card_token
        if card_user_key is not None:
            self.card_user_key = card_user_key
        if cvc is not None:
            self.cvc = cvc
        if expire_month is not None:
            self.expire_month = expire_month
        if expire_year is not None:
            self.expire_year = expire_year
        if register_card is not None:
            self.register_card = register_card

    @property
    def card_alias(self):
        """Gets the card_alias of this PaymentCard.  # noqa: E501


        :return: The card_alias of this PaymentCard.  # noqa: E501
        :rtype: str
        """
        return self._card_alias

    @card_alias.setter
    def card_alias(self, card_alias):
        """Sets the card_alias of this PaymentCard.


        :param card_alias: The card_alias of this PaymentCard.  # noqa: E501
        :type: str
        """

        self._card_alias = card_alias

    @property
    def card_expiry(self):
        """Gets the card_expiry of this PaymentCard.  # noqa: E501


        :return: The card_expiry of this PaymentCard.  # noqa: E501
        :rtype: str
        """
        return self._card_expiry

    @card_expiry.setter
    def card_expiry(self, card_expiry):
        """Sets the card_expiry of this PaymentCard.


        :param card_expiry: The card_expiry of this PaymentCard.  # noqa: E501
        :type: str
        """

        self._card_expiry = card_expiry

    @property
    def card_holder_name(self):
        """Gets the card_holder_name of this PaymentCard.  # noqa: E501


        :return: The card_holder_name of this PaymentCard.  # noqa: E501
        :rtype: str
        """
        return self._card_holder_name

    @card_holder_name.setter
    def card_holder_name(self, card_holder_name):
        """Sets the card_holder_name of this PaymentCard.


        :param card_holder_name: The card_holder_name of this PaymentCard.  # noqa: E501
        :type: str
        """

        self._card_holder_name = card_holder_name

    @property
    def card_number(self):
        """Gets the card_number of this PaymentCard.  # noqa: E501


        :return: The card_number of this PaymentCard.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this PaymentCard.


        :param card_number: The card_number of this PaymentCard.  # noqa: E501
        :type: str
        """

        self._card_number = card_number

    @property
    def card_token(self):
        """Gets the card_token of this PaymentCard.  # noqa: E501


        :return: The card_token of this PaymentCard.  # noqa: E501
        :rtype: str
        """
        return self._card_token

    @card_token.setter
    def card_token(self, card_token):
        """Sets the card_token of this PaymentCard.


        :param card_token: The card_token of this PaymentCard.  # noqa: E501
        :type: str
        """

        self._card_token = card_token

    @property
    def card_user_key(self):
        """Gets the card_user_key of this PaymentCard.  # noqa: E501


        :return: The card_user_key of this PaymentCard.  # noqa: E501
        :rtype: str
        """
        return self._card_user_key

    @card_user_key.setter
    def card_user_key(self, card_user_key):
        """Sets the card_user_key of this PaymentCard.


        :param card_user_key: The card_user_key of this PaymentCard.  # noqa: E501
        :type: str
        """

        self._card_user_key = card_user_key

    @property
    def cvc(self):
        """Gets the cvc of this PaymentCard.  # noqa: E501


        :return: The cvc of this PaymentCard.  # noqa: E501
        :rtype: str
        """
        return self._cvc

    @cvc.setter
    def cvc(self, cvc):
        """Sets the cvc of this PaymentCard.


        :param cvc: The cvc of this PaymentCard.  # noqa: E501
        :type: str
        """

        self._cvc = cvc

    @property
    def expire_month(self):
        """Gets the expire_month of this PaymentCard.  # noqa: E501


        :return: The expire_month of this PaymentCard.  # noqa: E501
        :rtype: str
        """
        return self._expire_month

    @expire_month.setter
    def expire_month(self, expire_month):
        """Sets the expire_month of this PaymentCard.


        :param expire_month: The expire_month of this PaymentCard.  # noqa: E501
        :type: str
        """

        self._expire_month = expire_month

    @property
    def expire_year(self):
        """Gets the expire_year of this PaymentCard.  # noqa: E501


        :return: The expire_year of this PaymentCard.  # noqa: E501
        :rtype: str
        """
        return self._expire_year

    @expire_year.setter
    def expire_year(self, expire_year):
        """Sets the expire_year of this PaymentCard.


        :param expire_year: The expire_year of this PaymentCard.  # noqa: E501
        :type: str
        """

        self._expire_year = expire_year

    @property
    def register_card(self):
        """Gets the register_card of this PaymentCard.  # noqa: E501


        :return: The register_card of this PaymentCard.  # noqa: E501
        :rtype: int
        """
        return self._register_card

    @register_card.setter
    def register_card(self, register_card):
        """Sets the register_card of this PaymentCard.


        :param register_card: The register_card of this PaymentCard.  # noqa: E501
        :type: int
        """

        self._register_card = register_card

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
