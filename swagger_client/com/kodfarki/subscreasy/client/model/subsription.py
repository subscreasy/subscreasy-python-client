# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.com.kodfarki.subscreasy.client.model.company import Company  # noqa: F401,E501
from swagger_client.com.kodfarki.subscreasy.client.model.coupon import Coupon  # noqa: F401,E501
from swagger_client.com.kodfarki.subscreasy.client.model.offer import Offer  # noqa: F401,E501
from swagger_client.com.kodfarki.subscreasy.client.model.saved_card import SavedCard  # noqa: F401,E501
from swagger_client.com.kodfarki.subscreasy.client.model.service_instance import ServiceInstance  # noqa: F401,E501


class Subsription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'applied_coupon': 'Coupon',
        'cancel_date': 'datetime',
        'card': 'SavedCard',
        'company': 'Company',
        'end_date': 'datetime',
        'id': 'int',
        'next_charging_date': 'datetime',
        'offer': 'Offer',
        'services': 'list[ServiceInstance]',
        'start_date': 'datetime',
        'status': 'str',
        'subscriber_id': 'str',
        'version': 'int'
    }

    attribute_map = {
        'applied_coupon': 'appliedCoupon',
        'cancel_date': 'cancelDate',
        'card': 'card',
        'company': 'company',
        'end_date': 'endDate',
        'id': 'id',
        'next_charging_date': 'nextChargingDate',
        'offer': 'offer',
        'services': 'services',
        'start_date': 'startDate',
        'status': 'status',
        'subscriber_id': 'subscriberId',
        'version': 'version'
    }

    def __init__(self, applied_coupon=None, cancel_date=None, card=None, company=None, end_date=None, id=None, next_charging_date=None, offer=None, services=None, start_date=None, status=None, subscriber_id=None, version=None):  # noqa: E501
        """Subsription - a model defined in Swagger"""  # noqa: E501

        self._applied_coupon = None
        self._cancel_date = None
        self._card = None
        self._company = None
        self._end_date = None
        self._id = None
        self._next_charging_date = None
        self._offer = None
        self._services = None
        self._start_date = None
        self._status = None
        self._subscriber_id = None
        self._version = None
        self.discriminator = None

        if applied_coupon is not None:
            self.applied_coupon = applied_coupon
        if cancel_date is not None:
            self.cancel_date = cancel_date
        if card is not None:
            self.card = card
        self.company = company
        if end_date is not None:
            self.end_date = end_date
        if id is not None:
            self.id = id
        if next_charging_date is not None:
            self.next_charging_date = next_charging_date
        self.offer = offer
        if services is not None:
            self.services = services
        if start_date is not None:
            self.start_date = start_date
        if status is not None:
            self.status = status
        if subscriber_id is not None:
            self.subscriber_id = subscriber_id
        if version is not None:
            self.version = version

    @property
    def applied_coupon(self):
        """Gets the applied_coupon of this Subsription.  # noqa: E501


        :return: The applied_coupon of this Subsription.  # noqa: E501
        :rtype: Coupon
        """
        return self._applied_coupon

    @applied_coupon.setter
    def applied_coupon(self, applied_coupon):
        """Sets the applied_coupon of this Subsription.


        :param applied_coupon: The applied_coupon of this Subsription.  # noqa: E501
        :type: Coupon
        """

        self._applied_coupon = applied_coupon

    @property
    def cancel_date(self):
        """Gets the cancel_date of this Subsription.  # noqa: E501


        :return: The cancel_date of this Subsription.  # noqa: E501
        :rtype: datetime
        """
        return self._cancel_date

    @cancel_date.setter
    def cancel_date(self, cancel_date):
        """Sets the cancel_date of this Subsription.


        :param cancel_date: The cancel_date of this Subsription.  # noqa: E501
        :type: datetime
        """

        self._cancel_date = cancel_date

    @property
    def card(self):
        """Gets the card of this Subsription.  # noqa: E501


        :return: The card of this Subsription.  # noqa: E501
        :rtype: SavedCard
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this Subsription.


        :param card: The card of this Subsription.  # noqa: E501
        :type: SavedCard
        """

        self._card = card

    @property
    def company(self):
        """Gets the company of this Subsription.  # noqa: E501


        :return: The company of this Subsription.  # noqa: E501
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Subsription.


        :param company: The company of this Subsription.  # noqa: E501
        :type: Company
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")  # noqa: E501

        self._company = company

    @property
    def end_date(self):
        """Gets the end_date of this Subsription.  # noqa: E501


        :return: The end_date of this Subsription.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Subsription.


        :param end_date: The end_date of this Subsription.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this Subsription.  # noqa: E501


        :return: The id of this Subsription.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subsription.


        :param id: The id of this Subsription.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def next_charging_date(self):
        """Gets the next_charging_date of this Subsription.  # noqa: E501


        :return: The next_charging_date of this Subsription.  # noqa: E501
        :rtype: datetime
        """
        return self._next_charging_date

    @next_charging_date.setter
    def next_charging_date(self, next_charging_date):
        """Sets the next_charging_date of this Subsription.


        :param next_charging_date: The next_charging_date of this Subsription.  # noqa: E501
        :type: datetime
        """

        self._next_charging_date = next_charging_date

    @property
    def offer(self):
        """Gets the offer of this Subsription.  # noqa: E501


        :return: The offer of this Subsription.  # noqa: E501
        :rtype: Offer
        """
        return self._offer

    @offer.setter
    def offer(self, offer):
        """Sets the offer of this Subsription.


        :param offer: The offer of this Subsription.  # noqa: E501
        :type: Offer
        """
        if offer is None:
            raise ValueError("Invalid value for `offer`, must not be `None`")  # noqa: E501

        self._offer = offer

    @property
    def services(self):
        """Gets the services of this Subsription.  # noqa: E501


        :return: The services of this Subsription.  # noqa: E501
        :rtype: list[ServiceInstance]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this Subsription.


        :param services: The services of this Subsription.  # noqa: E501
        :type: list[ServiceInstance]
        """

        self._services = services

    @property
    def start_date(self):
        """Gets the start_date of this Subsription.  # noqa: E501


        :return: The start_date of this Subsription.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Subsription.


        :param start_date: The start_date of this Subsription.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this Subsription.  # noqa: E501


        :return: The status of this Subsription.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Subsription.


        :param status: The status of this Subsription.  # noqa: E501
        :type: str
        """
        allowed_values = ["NEW", "ACTIVE", "SUSPENDED", "FINISHED", "CANCELLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subscriber_id(self):
        """Gets the subscriber_id of this Subsription.  # noqa: E501


        :return: The subscriber_id of this Subsription.  # noqa: E501
        :rtype: str
        """
        return self._subscriber_id

    @subscriber_id.setter
    def subscriber_id(self, subscriber_id):
        """Sets the subscriber_id of this Subsription.


        :param subscriber_id: The subscriber_id of this Subsription.  # noqa: E501
        :type: str
        """

        self._subscriber_id = subscriber_id

    @property
    def version(self):
        """Gets the version of this Subsription.  # noqa: E501


        :return: The version of this Subsription.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Subsription.


        :param version: The version of this Subsription.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subsription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
