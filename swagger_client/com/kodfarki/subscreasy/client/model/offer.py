# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.com.kodfarki.subscreasy.client.model.company import Company  # noqa: F401,E501
from swagger_client.com.kodfarki.subscreasy.client.model.recurrence_period import RecurrencePeriod  # noqa: F401,E501


class Offer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company': 'Company',
        'id': 'int',
        'name': 'str',
        'open_ended': 'bool',
        'price': 'float',
        'recurrence': 'RecurrencePeriod',
        'recurrence_count': 'int',
        'secure_id': 'str',
        'trial_period': 'int'
    }

    attribute_map = {
        'company': 'company',
        'id': 'id',
        'name': 'name',
        'open_ended': 'openEnded',
        'price': 'price',
        'recurrence': 'recurrence',
        'recurrence_count': 'recurrenceCount',
        'secure_id': 'secureId',
        'trial_period': 'trialPeriod'
    }

    def __init__(self, company=None, id=None, name=None, open_ended=None, price=None, recurrence=None, recurrence_count=None, secure_id=None, trial_period=None):  # noqa: E501
        """Offer - a model defined in Swagger"""  # noqa: E501

        self._company = None
        self._id = None
        self._name = None
        self._open_ended = None
        self._price = None
        self._recurrence = None
        self._recurrence_count = None
        self._secure_id = None
        self._trial_period = None
        self.discriminator = None

        self.company = company
        if id is not None:
            self.id = id
        self.name = name
        self.open_ended = open_ended
        self.price = price
        self.recurrence = recurrence
        if recurrence_count is not None:
            self.recurrence_count = recurrence_count
        if secure_id is not None:
            self.secure_id = secure_id
        if trial_period is not None:
            self.trial_period = trial_period

    @property
    def company(self):
        """Gets the company of this Offer.  # noqa: E501


        :return: The company of this Offer.  # noqa: E501
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Offer.


        :param company: The company of this Offer.  # noqa: E501
        :type: Company
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")  # noqa: E501

        self._company = company

    @property
    def id(self):
        """Gets the id of this Offer.  # noqa: E501


        :return: The id of this Offer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Offer.


        :param id: The id of this Offer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Offer.  # noqa: E501


        :return: The name of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Offer.


        :param name: The name of this Offer.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def open_ended(self):
        """Gets the open_ended of this Offer.  # noqa: E501


        :return: The open_ended of this Offer.  # noqa: E501
        :rtype: bool
        """
        return self._open_ended

    @open_ended.setter
    def open_ended(self, open_ended):
        """Sets the open_ended of this Offer.


        :param open_ended: The open_ended of this Offer.  # noqa: E501
        :type: bool
        """
        if open_ended is None:
            raise ValueError("Invalid value for `open_ended`, must not be `None`")  # noqa: E501

        self._open_ended = open_ended

    @property
    def price(self):
        """Gets the price of this Offer.  # noqa: E501


        :return: The price of this Offer.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Offer.


        :param price: The price of this Offer.  # noqa: E501
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def recurrence(self):
        """Gets the recurrence of this Offer.  # noqa: E501


        :return: The recurrence of this Offer.  # noqa: E501
        :rtype: RecurrencePeriod
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this Offer.


        :param recurrence: The recurrence of this Offer.  # noqa: E501
        :type: RecurrencePeriod
        """
        if recurrence is None:
            raise ValueError("Invalid value for `recurrence`, must not be `None`")  # noqa: E501

        self._recurrence = recurrence

    @property
    def recurrence_count(self):
        """Gets the recurrence_count of this Offer.  # noqa: E501


        :return: The recurrence_count of this Offer.  # noqa: E501
        :rtype: int
        """
        return self._recurrence_count

    @recurrence_count.setter
    def recurrence_count(self, recurrence_count):
        """Sets the recurrence_count of this Offer.


        :param recurrence_count: The recurrence_count of this Offer.  # noqa: E501
        :type: int
        """

        self._recurrence_count = recurrence_count

    @property
    def secure_id(self):
        """Gets the secure_id of this Offer.  # noqa: E501


        :return: The secure_id of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._secure_id

    @secure_id.setter
    def secure_id(self, secure_id):
        """Sets the secure_id of this Offer.


        :param secure_id: The secure_id of this Offer.  # noqa: E501
        :type: str
        """

        self._secure_id = secure_id

    @property
    def trial_period(self):
        """Gets the trial_period of this Offer.  # noqa: E501


        :return: The trial_period of this Offer.  # noqa: E501
        :rtype: int
        """
        return self._trial_period

    @trial_period.setter
    def trial_period(self, trial_period):
        """Sets the trial_period of this Offer.


        :param trial_period: The trial_period of this Offer.  # noqa: E501
        :type: int
        """

        self._trial_period = trial_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Offer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
