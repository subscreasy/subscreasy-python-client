# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Deduction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'int',
        'id': 'int',
        'service_id': 'int',
        'usage_end_time': 'datetime',
        'usage_start_time': 'datetime',
        'user_id': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'id': 'id',
        'service_id': 'serviceId',
        'usage_end_time': 'usageEndTime',
        'usage_start_time': 'usageStartTime',
        'user_id': 'userId'
    }

    def __init__(self, amount=None, id=None, service_id=None, usage_end_time=None, usage_start_time=None, user_id=None):  # noqa: E501
        """Deduction - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._id = None
        self._service_id = None
        self._usage_end_time = None
        self._usage_start_time = None
        self._user_id = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if id is not None:
            self.id = id
        if service_id is not None:
            self.service_id = service_id
        if usage_end_time is not None:
            self.usage_end_time = usage_end_time
        if usage_start_time is not None:
            self.usage_start_time = usage_start_time
        if user_id is not None:
            self.user_id = user_id

    @property
    def amount(self):
        """Gets the amount of this Deduction.  # noqa: E501


        :return: The amount of this Deduction.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Deduction.


        :param amount: The amount of this Deduction.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def id(self):
        """Gets the id of this Deduction.  # noqa: E501


        :return: The id of this Deduction.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Deduction.


        :param id: The id of this Deduction.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def service_id(self):
        """Gets the service_id of this Deduction.  # noqa: E501


        :return: The service_id of this Deduction.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this Deduction.


        :param service_id: The service_id of this Deduction.  # noqa: E501
        :type: int
        """

        self._service_id = service_id

    @property
    def usage_end_time(self):
        """Gets the usage_end_time of this Deduction.  # noqa: E501


        :return: The usage_end_time of this Deduction.  # noqa: E501
        :rtype: datetime
        """
        return self._usage_end_time

    @usage_end_time.setter
    def usage_end_time(self, usage_end_time):
        """Sets the usage_end_time of this Deduction.


        :param usage_end_time: The usage_end_time of this Deduction.  # noqa: E501
        :type: datetime
        """

        self._usage_end_time = usage_end_time

    @property
    def usage_start_time(self):
        """Gets the usage_start_time of this Deduction.  # noqa: E501


        :return: The usage_start_time of this Deduction.  # noqa: E501
        :rtype: datetime
        """
        return self._usage_start_time

    @usage_start_time.setter
    def usage_start_time(self, usage_start_time):
        """Sets the usage_start_time of this Deduction.


        :param usage_start_time: The usage_start_time of this Deduction.  # noqa: E501
        :type: datetime
        """

        self._usage_start_time = usage_start_time

    @property
    def user_id(self):
        """Gets the user_id of this Deduction.  # noqa: E501


        :return: The user_id of this Deduction.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Deduction.


        :param user_id: The user_id of this Deduction.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Deduction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
