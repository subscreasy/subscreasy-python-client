# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Invoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'billing_month': 'int',
        'billing_year': 'int',
        'id': 'int',
        'period_end': 'datetime',
        'period_start': 'datetime',
        'status': 'str',
        'subscriber_secure_id': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'billing_month': 'billingMonth',
        'billing_year': 'billingYear',
        'id': 'id',
        'period_end': 'periodEnd',
        'period_start': 'periodStart',
        'status': 'status',
        'subscriber_secure_id': 'subscriberSecureId'
    }

    def __init__(self, amount=None, billing_month=None, billing_year=None, id=None, period_end=None, period_start=None, status=None, subscriber_secure_id=None):  # noqa: E501
        """Invoice - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._billing_month = None
        self._billing_year = None
        self._id = None
        self._period_end = None
        self._period_start = None
        self._status = None
        self._subscriber_secure_id = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if billing_month is not None:
            self.billing_month = billing_month
        if billing_year is not None:
            self.billing_year = billing_year
        if id is not None:
            self.id = id
        if period_end is not None:
            self.period_end = period_end
        if period_start is not None:
            self.period_start = period_start
        if status is not None:
            self.status = status
        if subscriber_secure_id is not None:
            self.subscriber_secure_id = subscriber_secure_id

    @property
    def amount(self):
        """Gets the amount of this Invoice.  # noqa: E501


        :return: The amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Invoice.


        :param amount: The amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def billing_month(self):
        """Gets the billing_month of this Invoice.  # noqa: E501


        :return: The billing_month of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._billing_month

    @billing_month.setter
    def billing_month(self, billing_month):
        """Sets the billing_month of this Invoice.


        :param billing_month: The billing_month of this Invoice.  # noqa: E501
        :type: int
        """

        self._billing_month = billing_month

    @property
    def billing_year(self):
        """Gets the billing_year of this Invoice.  # noqa: E501


        :return: The billing_year of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._billing_year

    @billing_year.setter
    def billing_year(self, billing_year):
        """Sets the billing_year of this Invoice.


        :param billing_year: The billing_year of this Invoice.  # noqa: E501
        :type: int
        """

        self._billing_year = billing_year

    @property
    def id(self):
        """Gets the id of this Invoice.  # noqa: E501


        :return: The id of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invoice.


        :param id: The id of this Invoice.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def period_end(self):
        """Gets the period_end of this Invoice.  # noqa: E501


        :return: The period_end of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this Invoice.


        :param period_end: The period_end of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._period_end = period_end

    @property
    def period_start(self):
        """Gets the period_start of this Invoice.  # noqa: E501


        :return: The period_start of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this Invoice.


        :param period_start: The period_start of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._period_start = period_start

    @property
    def status(self):
        """Gets the status of this Invoice.  # noqa: E501


        :return: The status of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Invoice.


        :param status: The status of this Invoice.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def subscriber_secure_id(self):
        """Gets the subscriber_secure_id of this Invoice.  # noqa: E501


        :return: The subscriber_secure_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._subscriber_secure_id

    @subscriber_secure_id.setter
    def subscriber_secure_id(self, subscriber_secure_id):
        """Sets the subscriber_secure_id of this Invoice.


        :param subscriber_secure_id: The subscriber_secure_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._subscriber_secure_id = subscriber_secure_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
