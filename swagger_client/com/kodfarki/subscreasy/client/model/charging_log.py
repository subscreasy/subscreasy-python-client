# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.com.kodfarki.subscreasy.client.model.charging_log import ChargingLog  # noqa: F401,E501


class ChargingLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'applied_coupon': 'int',
        'auth_code': 'str',
        'company_id': 'int',
        'create_date': 'datetime',
        'currency': 'str',
        'error_code': 'str',
        'error_text': 'str',
        'id': 'int',
        'invoice_id': 'int',
        'job_id': 'int',
        'parent': 'ChargingLog',
        'payment_gateway': 'str',
        'payment_id': 'str',
        'price': 'float',
        'reason': 'str',
        'service_instance_id': 'int',
        'status': 'str',
        'subscriber_secure_id': 'str',
        'subscription_id': 'int',
        'transaction_id': 'str'
    }

    attribute_map = {
        'applied_coupon': 'appliedCoupon',
        'auth_code': 'authCode',
        'company_id': 'companyId',
        'create_date': 'createDate',
        'currency': 'currency',
        'error_code': 'errorCode',
        'error_text': 'errorText',
        'id': 'id',
        'invoice_id': 'invoiceId',
        'job_id': 'jobId',
        'parent': 'parent',
        'payment_gateway': 'paymentGateway',
        'payment_id': 'paymentId',
        'price': 'price',
        'reason': 'reason',
        'service_instance_id': 'serviceInstanceId',
        'status': 'status',
        'subscriber_secure_id': 'subscriberSecureId',
        'subscription_id': 'subscriptionId',
        'transaction_id': 'transactionId'
    }

    def __init__(self, applied_coupon=None, auth_code=None, company_id=None, create_date=None, currency=None, error_code=None, error_text=None, id=None, invoice_id=None, job_id=None, parent=None, payment_gateway=None, payment_id=None, price=None, reason=None, service_instance_id=None, status=None, subscriber_secure_id=None, subscription_id=None, transaction_id=None):  # noqa: E501
        """ChargingLog - a model defined in Swagger"""  # noqa: E501

        self._applied_coupon = None
        self._auth_code = None
        self._company_id = None
        self._create_date = None
        self._currency = None
        self._error_code = None
        self._error_text = None
        self._id = None
        self._invoice_id = None
        self._job_id = None
        self._parent = None
        self._payment_gateway = None
        self._payment_id = None
        self._price = None
        self._reason = None
        self._service_instance_id = None
        self._status = None
        self._subscriber_secure_id = None
        self._subscription_id = None
        self._transaction_id = None
        self.discriminator = None

        if applied_coupon is not None:
            self.applied_coupon = applied_coupon
        if auth_code is not None:
            self.auth_code = auth_code
        if company_id is not None:
            self.company_id = company_id
        if create_date is not None:
            self.create_date = create_date
        if currency is not None:
            self.currency = currency
        if error_code is not None:
            self.error_code = error_code
        if error_text is not None:
            self.error_text = error_text
        if id is not None:
            self.id = id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if job_id is not None:
            self.job_id = job_id
        if parent is not None:
            self.parent = parent
        if payment_gateway is not None:
            self.payment_gateway = payment_gateway
        if payment_id is not None:
            self.payment_id = payment_id
        if price is not None:
            self.price = price
        if reason is not None:
            self.reason = reason
        if service_instance_id is not None:
            self.service_instance_id = service_instance_id
        if status is not None:
            self.status = status
        if subscriber_secure_id is not None:
            self.subscriber_secure_id = subscriber_secure_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if transaction_id is not None:
            self.transaction_id = transaction_id

    @property
    def applied_coupon(self):
        """Gets the applied_coupon of this ChargingLog.  # noqa: E501


        :return: The applied_coupon of this ChargingLog.  # noqa: E501
        :rtype: int
        """
        return self._applied_coupon

    @applied_coupon.setter
    def applied_coupon(self, applied_coupon):
        """Sets the applied_coupon of this ChargingLog.


        :param applied_coupon: The applied_coupon of this ChargingLog.  # noqa: E501
        :type: int
        """

        self._applied_coupon = applied_coupon

    @property
    def auth_code(self):
        """Gets the auth_code of this ChargingLog.  # noqa: E501


        :return: The auth_code of this ChargingLog.  # noqa: E501
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this ChargingLog.


        :param auth_code: The auth_code of this ChargingLog.  # noqa: E501
        :type: str
        """

        self._auth_code = auth_code

    @property
    def company_id(self):
        """Gets the company_id of this ChargingLog.  # noqa: E501


        :return: The company_id of this ChargingLog.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this ChargingLog.


        :param company_id: The company_id of this ChargingLog.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def create_date(self):
        """Gets the create_date of this ChargingLog.  # noqa: E501


        :return: The create_date of this ChargingLog.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this ChargingLog.


        :param create_date: The create_date of this ChargingLog.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def currency(self):
        """Gets the currency of this ChargingLog.  # noqa: E501


        :return: The currency of this ChargingLog.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ChargingLog.


        :param currency: The currency of this ChargingLog.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def error_code(self):
        """Gets the error_code of this ChargingLog.  # noqa: E501


        :return: The error_code of this ChargingLog.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ChargingLog.


        :param error_code: The error_code of this ChargingLog.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_text(self):
        """Gets the error_text of this ChargingLog.  # noqa: E501


        :return: The error_text of this ChargingLog.  # noqa: E501
        :rtype: str
        """
        return self._error_text

    @error_text.setter
    def error_text(self, error_text):
        """Sets the error_text of this ChargingLog.


        :param error_text: The error_text of this ChargingLog.  # noqa: E501
        :type: str
        """

        self._error_text = error_text

    @property
    def id(self):
        """Gets the id of this ChargingLog.  # noqa: E501


        :return: The id of this ChargingLog.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChargingLog.


        :param id: The id of this ChargingLog.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this ChargingLog.  # noqa: E501


        :return: The invoice_id of this ChargingLog.  # noqa: E501
        :rtype: int
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this ChargingLog.


        :param invoice_id: The invoice_id of this ChargingLog.  # noqa: E501
        :type: int
        """

        self._invoice_id = invoice_id

    @property
    def job_id(self):
        """Gets the job_id of this ChargingLog.  # noqa: E501


        :return: The job_id of this ChargingLog.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this ChargingLog.


        :param job_id: The job_id of this ChargingLog.  # noqa: E501
        :type: int
        """

        self._job_id = job_id

    @property
    def parent(self):
        """Gets the parent of this ChargingLog.  # noqa: E501


        :return: The parent of this ChargingLog.  # noqa: E501
        :rtype: ChargingLog
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this ChargingLog.


        :param parent: The parent of this ChargingLog.  # noqa: E501
        :type: ChargingLog
        """

        self._parent = parent

    @property
    def payment_gateway(self):
        """Gets the payment_gateway of this ChargingLog.  # noqa: E501


        :return: The payment_gateway of this ChargingLog.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway

    @payment_gateway.setter
    def payment_gateway(self, payment_gateway):
        """Sets the payment_gateway of this ChargingLog.


        :param payment_gateway: The payment_gateway of this ChargingLog.  # noqa: E501
        :type: str
        """
        allowed_values = ["OFFLINE", "IYZICO", "PAYU"]  # noqa: E501
        if payment_gateway not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_gateway` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_gateway, allowed_values)
            )

        self._payment_gateway = payment_gateway

    @property
    def payment_id(self):
        """Gets the payment_id of this ChargingLog.  # noqa: E501


        :return: The payment_id of this ChargingLog.  # noqa: E501
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this ChargingLog.


        :param payment_id: The payment_id of this ChargingLog.  # noqa: E501
        :type: str
        """

        self._payment_id = payment_id

    @property
    def price(self):
        """Gets the price of this ChargingLog.  # noqa: E501


        :return: The price of this ChargingLog.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ChargingLog.


        :param price: The price of this ChargingLog.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def reason(self):
        """Gets the reason of this ChargingLog.  # noqa: E501


        :return: The reason of this ChargingLog.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ChargingLog.


        :param reason: The reason of this ChargingLog.  # noqa: E501
        :type: str
        """
        allowed_values = ["START", "RENEWAL", "OVER_USAGE", "REFUND"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"  # noqa: E501
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def service_instance_id(self):
        """Gets the service_instance_id of this ChargingLog.  # noqa: E501


        :return: The service_instance_id of this ChargingLog.  # noqa: E501
        :rtype: int
        """
        return self._service_instance_id

    @service_instance_id.setter
    def service_instance_id(self, service_instance_id):
        """Sets the service_instance_id of this ChargingLog.


        :param service_instance_id: The service_instance_id of this ChargingLog.  # noqa: E501
        :type: int
        """

        self._service_instance_id = service_instance_id

    @property
    def status(self):
        """Gets the status of this ChargingLog.  # noqa: E501


        :return: The status of this ChargingLog.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChargingLog.


        :param status: The status of this ChargingLog.  # noqa: E501
        :type: str
        """
        allowed_values = ["NOT_PAID", "SUCCESS", "FAIL", "REFUNDED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subscriber_secure_id(self):
        """Gets the subscriber_secure_id of this ChargingLog.  # noqa: E501


        :return: The subscriber_secure_id of this ChargingLog.  # noqa: E501
        :rtype: str
        """
        return self._subscriber_secure_id

    @subscriber_secure_id.setter
    def subscriber_secure_id(self, subscriber_secure_id):
        """Sets the subscriber_secure_id of this ChargingLog.


        :param subscriber_secure_id: The subscriber_secure_id of this ChargingLog.  # noqa: E501
        :type: str
        """

        self._subscriber_secure_id = subscriber_secure_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this ChargingLog.  # noqa: E501


        :return: The subscription_id of this ChargingLog.  # noqa: E501
        :rtype: int
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this ChargingLog.


        :param subscription_id: The subscription_id of this ChargingLog.  # noqa: E501
        :type: int
        """

        self._subscription_id = subscription_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this ChargingLog.  # noqa: E501


        :return: The transaction_id of this ChargingLog.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this ChargingLog.


        :param transaction_id: The transaction_id of this ChargingLog.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChargingLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
