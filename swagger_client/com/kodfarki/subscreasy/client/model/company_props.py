# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.com.kodfarki.subscreasy.client.model.company import Company  # noqa: F401,E501


class CompanyProps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_key': 'str',
        'callback_url': 'str',
        'company': 'Company',
        'id': 'int',
        'payment_gateway_api_key': 'str',
        'payment_gateway_security_key': 'str',
        'payment_method': 'str',
        'secure_key': 'str'
    }

    attribute_map = {
        'api_key': 'apiKey',
        'callback_url': 'callbackUrl',
        'company': 'company',
        'id': 'id',
        'payment_gateway_api_key': 'paymentGatewayApiKey',
        'payment_gateway_security_key': 'paymentGatewaySecurityKey',
        'payment_method': 'paymentMethod',
        'secure_key': 'secureKey'
    }

    def __init__(self, api_key=None, callback_url=None, company=None, id=None, payment_gateway_api_key=None, payment_gateway_security_key=None, payment_method=None, secure_key=None):  # noqa: E501
        """CompanyProps - a model defined in Swagger"""  # noqa: E501

        self._api_key = None
        self._callback_url = None
        self._company = None
        self._id = None
        self._payment_gateway_api_key = None
        self._payment_gateway_security_key = None
        self._payment_method = None
        self._secure_key = None
        self.discriminator = None

        if api_key is not None:
            self.api_key = api_key
        if callback_url is not None:
            self.callback_url = callback_url
        if company is not None:
            self.company = company
        if id is not None:
            self.id = id
        if payment_gateway_api_key is not None:
            self.payment_gateway_api_key = payment_gateway_api_key
        if payment_gateway_security_key is not None:
            self.payment_gateway_security_key = payment_gateway_security_key
        if payment_method is not None:
            self.payment_method = payment_method
        if secure_key is not None:
            self.secure_key = secure_key

    @property
    def api_key(self):
        """Gets the api_key of this CompanyProps.  # noqa: E501


        :return: The api_key of this CompanyProps.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this CompanyProps.


        :param api_key: The api_key of this CompanyProps.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def callback_url(self):
        """Gets the callback_url of this CompanyProps.  # noqa: E501


        :return: The callback_url of this CompanyProps.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this CompanyProps.


        :param callback_url: The callback_url of this CompanyProps.  # noqa: E501
        :type: str
        """

        self._callback_url = callback_url

    @property
    def company(self):
        """Gets the company of this CompanyProps.  # noqa: E501


        :return: The company of this CompanyProps.  # noqa: E501
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CompanyProps.


        :param company: The company of this CompanyProps.  # noqa: E501
        :type: Company
        """

        self._company = company

    @property
    def id(self):
        """Gets the id of this CompanyProps.  # noqa: E501


        :return: The id of this CompanyProps.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyProps.


        :param id: The id of this CompanyProps.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def payment_gateway_api_key(self):
        """Gets the payment_gateway_api_key of this CompanyProps.  # noqa: E501


        :return: The payment_gateway_api_key of this CompanyProps.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway_api_key

    @payment_gateway_api_key.setter
    def payment_gateway_api_key(self, payment_gateway_api_key):
        """Sets the payment_gateway_api_key of this CompanyProps.


        :param payment_gateway_api_key: The payment_gateway_api_key of this CompanyProps.  # noqa: E501
        :type: str
        """

        self._payment_gateway_api_key = payment_gateway_api_key

    @property
    def payment_gateway_security_key(self):
        """Gets the payment_gateway_security_key of this CompanyProps.  # noqa: E501


        :return: The payment_gateway_security_key of this CompanyProps.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway_security_key

    @payment_gateway_security_key.setter
    def payment_gateway_security_key(self, payment_gateway_security_key):
        """Sets the payment_gateway_security_key of this CompanyProps.


        :param payment_gateway_security_key: The payment_gateway_security_key of this CompanyProps.  # noqa: E501
        :type: str
        """

        self._payment_gateway_security_key = payment_gateway_security_key

    @property
    def payment_method(self):
        """Gets the payment_method of this CompanyProps.  # noqa: E501


        :return: The payment_method of this CompanyProps.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this CompanyProps.


        :param payment_method: The payment_method of this CompanyProps.  # noqa: E501
        :type: str
        """
        allowed_values = ["OFFLINE", "IYZICO", "PAYU"]  # noqa: E501
        if payment_method not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_method` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_method, allowed_values)
            )

        self._payment_method = payment_method

    @property
    def secure_key(self):
        """Gets the secure_key of this CompanyProps.  # noqa: E501


        :return: The secure_key of this CompanyProps.  # noqa: E501
        :rtype: str
        """
        return self._secure_key

    @secure_key.setter
    def secure_key(self, secure_key):
        """Sets the secure_key of this CompanyProps.


        :param secure_key: The secure_key of this CompanyProps.  # noqa: E501
        :type: str
        """

        self._secure_key = secure_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyProps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
