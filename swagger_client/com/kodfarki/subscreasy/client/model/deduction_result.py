# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeductionResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capacity': 'float',
        'consumed_resource_id': 'int',
        'over_usage': 'float',
        'requested_amount': 'int',
        'subscription_id': 'int',
        'usage': 'float'
    }

    attribute_map = {
        'capacity': 'capacity',
        'consumed_resource_id': 'consumedResourceId',
        'over_usage': 'overUsage',
        'requested_amount': 'requestedAmount',
        'subscription_id': 'subscriptionId',
        'usage': 'usage'
    }

    def __init__(self, capacity=None, consumed_resource_id=None, over_usage=None, requested_amount=None, subscription_id=None, usage=None):  # noqa: E501
        """DeductionResult - a model defined in Swagger"""  # noqa: E501

        self._capacity = None
        self._consumed_resource_id = None
        self._over_usage = None
        self._requested_amount = None
        self._subscription_id = None
        self._usage = None
        self.discriminator = None

        if capacity is not None:
            self.capacity = capacity
        if consumed_resource_id is not None:
            self.consumed_resource_id = consumed_resource_id
        if over_usage is not None:
            self.over_usage = over_usage
        if requested_amount is not None:
            self.requested_amount = requested_amount
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if usage is not None:
            self.usage = usage

    @property
    def capacity(self):
        """Gets the capacity of this DeductionResult.  # noqa: E501


        :return: The capacity of this DeductionResult.  # noqa: E501
        :rtype: float
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this DeductionResult.


        :param capacity: The capacity of this DeductionResult.  # noqa: E501
        :type: float
        """

        self._capacity = capacity

    @property
    def consumed_resource_id(self):
        """Gets the consumed_resource_id of this DeductionResult.  # noqa: E501


        :return: The consumed_resource_id of this DeductionResult.  # noqa: E501
        :rtype: int
        """
        return self._consumed_resource_id

    @consumed_resource_id.setter
    def consumed_resource_id(self, consumed_resource_id):
        """Sets the consumed_resource_id of this DeductionResult.


        :param consumed_resource_id: The consumed_resource_id of this DeductionResult.  # noqa: E501
        :type: int
        """

        self._consumed_resource_id = consumed_resource_id

    @property
    def over_usage(self):
        """Gets the over_usage of this DeductionResult.  # noqa: E501


        :return: The over_usage of this DeductionResult.  # noqa: E501
        :rtype: float
        """
        return self._over_usage

    @over_usage.setter
    def over_usage(self, over_usage):
        """Sets the over_usage of this DeductionResult.


        :param over_usage: The over_usage of this DeductionResult.  # noqa: E501
        :type: float
        """

        self._over_usage = over_usage

    @property
    def requested_amount(self):
        """Gets the requested_amount of this DeductionResult.  # noqa: E501


        :return: The requested_amount of this DeductionResult.  # noqa: E501
        :rtype: int
        """
        return self._requested_amount

    @requested_amount.setter
    def requested_amount(self, requested_amount):
        """Sets the requested_amount of this DeductionResult.


        :param requested_amount: The requested_amount of this DeductionResult.  # noqa: E501
        :type: int
        """

        self._requested_amount = requested_amount

    @property
    def subscription_id(self):
        """Gets the subscription_id of this DeductionResult.  # noqa: E501


        :return: The subscription_id of this DeductionResult.  # noqa: E501
        :rtype: int
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this DeductionResult.


        :param subscription_id: The subscription_id of this DeductionResult.  # noqa: E501
        :type: int
        """

        self._subscription_id = subscription_id

    @property
    def usage(self):
        """Gets the usage of this DeductionResult.  # noqa: E501


        :return: The usage of this DeductionResult.  # noqa: E501
        :rtype: float
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this DeductionResult.


        :param usage: The usage of this DeductionResult.  # noqa: E501
        :type: float
        """

        self._usage = usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeductionResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
