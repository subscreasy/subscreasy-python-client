# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InvoiceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'int',
        'selected_date': 'datetime',
        'service_user_id': 'int'
    }

    attribute_map = {
        'customer_id': 'customerId',
        'selected_date': 'selectedDate',
        'service_user_id': 'serviceUserId'
    }

    def __init__(self, customer_id=None, selected_date=None, service_user_id=None):  # noqa: E501
        """InvoiceRequest - a model defined in Swagger"""  # noqa: E501

        self._customer_id = None
        self._selected_date = None
        self._service_user_id = None
        self.discriminator = None

        if customer_id is not None:
            self.customer_id = customer_id
        if selected_date is not None:
            self.selected_date = selected_date
        if service_user_id is not None:
            self.service_user_id = service_user_id

    @property
    def customer_id(self):
        """Gets the customer_id of this InvoiceRequest.  # noqa: E501


        :return: The customer_id of this InvoiceRequest.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this InvoiceRequest.


        :param customer_id: The customer_id of this InvoiceRequest.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def selected_date(self):
        """Gets the selected_date of this InvoiceRequest.  # noqa: E501


        :return: The selected_date of this InvoiceRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._selected_date

    @selected_date.setter
    def selected_date(self, selected_date):
        """Sets the selected_date of this InvoiceRequest.


        :param selected_date: The selected_date of this InvoiceRequest.  # noqa: E501
        :type: datetime
        """

        self._selected_date = selected_date

    @property
    def service_user_id(self):
        """Gets the service_user_id of this InvoiceRequest.  # noqa: E501


        :return: The service_user_id of this InvoiceRequest.  # noqa: E501
        :rtype: int
        """
        return self._service_user_id

    @service_user_id.setter
    def service_user_id(self, service_user_id):
        """Sets the service_user_id of this InvoiceRequest.


        :param service_user_id: The service_user_id of this InvoiceRequest.  # noqa: E501
        :type: int
        """

        self._service_user_id = service_user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
