# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.com.kodfarki.subscreasy.client.model.offer import Offer  # noqa: F401,E501
from swagger_client.com.kodfarki.subscreasy.client.model.service_offering import ServiceOffering  # noqa: F401,E501
from swagger_client.com.kodfarki.subscreasy.client.model.subsription import Subsription  # noqa: F401,E501


class ServiceInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capacity': 'float',
        'current_usage': 'float',
        'end_date': 'datetime',
        'id': 'int',
        'name': 'str',
        'number_of_units': 'int',
        'offer': 'Offer',
        'over_usage': 'float',
        'over_usage_quota': 'float',
        'quota_origin': 'str',
        'service_offering': 'ServiceOffering',
        'service_type': 'str',
        'start_date': 'datetime',
        'status': 'str',
        'subscriber_id': 'str',
        'subscription': 'Subsription',
        'type': 'str',
        'version': 'int'
    }

    attribute_map = {
        'capacity': 'capacity',
        'current_usage': 'currentUsage',
        'end_date': 'endDate',
        'id': 'id',
        'name': 'name',
        'number_of_units': 'numberOfUnits',
        'offer': 'offer',
        'over_usage': 'overUsage',
        'over_usage_quota': 'overUsageQuota',
        'quota_origin': 'quotaOrigin',
        'service_offering': 'serviceOffering',
        'service_type': 'serviceType',
        'start_date': 'startDate',
        'status': 'status',
        'subscriber_id': 'subscriberId',
        'subscription': 'subscription',
        'type': 'type',
        'version': 'version'
    }

    def __init__(self, capacity=None, current_usage=None, end_date=None, id=None, name=None, number_of_units=None, offer=None, over_usage=None, over_usage_quota=None, quota_origin=None, service_offering=None, service_type=None, start_date=None, status=None, subscriber_id=None, subscription=None, type=None, version=None):  # noqa: E501
        """ServiceInstance - a model defined in Swagger"""  # noqa: E501

        self._capacity = None
        self._current_usage = None
        self._end_date = None
        self._id = None
        self._name = None
        self._number_of_units = None
        self._offer = None
        self._over_usage = None
        self._over_usage_quota = None
        self._quota_origin = None
        self._service_offering = None
        self._service_type = None
        self._start_date = None
        self._status = None
        self._subscriber_id = None
        self._subscription = None
        self._type = None
        self._version = None
        self.discriminator = None

        if capacity is not None:
            self.capacity = capacity
        if current_usage is not None:
            self.current_usage = current_usage
        if end_date is not None:
            self.end_date = end_date
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if number_of_units is not None:
            self.number_of_units = number_of_units
        if offer is not None:
            self.offer = offer
        if over_usage is not None:
            self.over_usage = over_usage
        if over_usage_quota is not None:
            self.over_usage_quota = over_usage_quota
        if quota_origin is not None:
            self.quota_origin = quota_origin
        if service_offering is not None:
            self.service_offering = service_offering
        if service_type is not None:
            self.service_type = service_type
        if start_date is not None:
            self.start_date = start_date
        if status is not None:
            self.status = status
        if subscriber_id is not None:
            self.subscriber_id = subscriber_id
        if subscription is not None:
            self.subscription = subscription
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version

    @property
    def capacity(self):
        """Gets the capacity of this ServiceInstance.  # noqa: E501


        :return: The capacity of this ServiceInstance.  # noqa: E501
        :rtype: float
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this ServiceInstance.


        :param capacity: The capacity of this ServiceInstance.  # noqa: E501
        :type: float
        """

        self._capacity = capacity

    @property
    def current_usage(self):
        """Gets the current_usage of this ServiceInstance.  # noqa: E501


        :return: The current_usage of this ServiceInstance.  # noqa: E501
        :rtype: float
        """
        return self._current_usage

    @current_usage.setter
    def current_usage(self, current_usage):
        """Sets the current_usage of this ServiceInstance.


        :param current_usage: The current_usage of this ServiceInstance.  # noqa: E501
        :type: float
        """

        self._current_usage = current_usage

    @property
    def end_date(self):
        """Gets the end_date of this ServiceInstance.  # noqa: E501


        :return: The end_date of this ServiceInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ServiceInstance.


        :param end_date: The end_date of this ServiceInstance.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this ServiceInstance.  # noqa: E501


        :return: The id of this ServiceInstance.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceInstance.


        :param id: The id of this ServiceInstance.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ServiceInstance.  # noqa: E501


        :return: The name of this ServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceInstance.


        :param name: The name of this ServiceInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number_of_units(self):
        """Gets the number_of_units of this ServiceInstance.  # noqa: E501


        :return: The number_of_units of this ServiceInstance.  # noqa: E501
        :rtype: int
        """
        return self._number_of_units

    @number_of_units.setter
    def number_of_units(self, number_of_units):
        """Sets the number_of_units of this ServiceInstance.


        :param number_of_units: The number_of_units of this ServiceInstance.  # noqa: E501
        :type: int
        """

        self._number_of_units = number_of_units

    @property
    def offer(self):
        """Gets the offer of this ServiceInstance.  # noqa: E501


        :return: The offer of this ServiceInstance.  # noqa: E501
        :rtype: Offer
        """
        return self._offer

    @offer.setter
    def offer(self, offer):
        """Sets the offer of this ServiceInstance.


        :param offer: The offer of this ServiceInstance.  # noqa: E501
        :type: Offer
        """

        self._offer = offer

    @property
    def over_usage(self):
        """Gets the over_usage of this ServiceInstance.  # noqa: E501


        :return: The over_usage of this ServiceInstance.  # noqa: E501
        :rtype: float
        """
        return self._over_usage

    @over_usage.setter
    def over_usage(self, over_usage):
        """Sets the over_usage of this ServiceInstance.


        :param over_usage: The over_usage of this ServiceInstance.  # noqa: E501
        :type: float
        """

        self._over_usage = over_usage

    @property
    def over_usage_quota(self):
        """Gets the over_usage_quota of this ServiceInstance.  # noqa: E501


        :return: The over_usage_quota of this ServiceInstance.  # noqa: E501
        :rtype: float
        """
        return self._over_usage_quota

    @over_usage_quota.setter
    def over_usage_quota(self, over_usage_quota):
        """Sets the over_usage_quota of this ServiceInstance.


        :param over_usage_quota: The over_usage_quota of this ServiceInstance.  # noqa: E501
        :type: float
        """

        self._over_usage_quota = over_usage_quota

    @property
    def quota_origin(self):
        """Gets the quota_origin of this ServiceInstance.  # noqa: E501


        :return: The quota_origin of this ServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._quota_origin

    @quota_origin.setter
    def quota_origin(self, quota_origin):
        """Sets the quota_origin of this ServiceInstance.


        :param quota_origin: The quota_origin of this ServiceInstance.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUBS", "OVER"]  # noqa: E501
        if quota_origin not in allowed_values:
            raise ValueError(
                "Invalid value for `quota_origin` ({0}), must be one of {1}"  # noqa: E501
                .format(quota_origin, allowed_values)
            )

        self._quota_origin = quota_origin

    @property
    def service_offering(self):
        """Gets the service_offering of this ServiceInstance.  # noqa: E501


        :return: The service_offering of this ServiceInstance.  # noqa: E501
        :rtype: ServiceOffering
        """
        return self._service_offering

    @service_offering.setter
    def service_offering(self, service_offering):
        """Sets the service_offering of this ServiceInstance.


        :param service_offering: The service_offering of this ServiceInstance.  # noqa: E501
        :type: ServiceOffering
        """

        self._service_offering = service_offering

    @property
    def service_type(self):
        """Gets the service_type of this ServiceInstance.  # noqa: E501


        :return: The service_type of this ServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this ServiceInstance.


        :param service_type: The service_type of this ServiceInstance.  # noqa: E501
        :type: str
        """
        allowed_values = ["ONOFF", "SEAT_BASED", "USAGE_BASED"]  # noqa: E501
        if service_type not in allowed_values:
            raise ValueError(
                "Invalid value for `service_type` ({0}), must be one of {1}"  # noqa: E501
                .format(service_type, allowed_values)
            )

        self._service_type = service_type

    @property
    def start_date(self):
        """Gets the start_date of this ServiceInstance.  # noqa: E501


        :return: The start_date of this ServiceInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ServiceInstance.


        :param start_date: The start_date of this ServiceInstance.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this ServiceInstance.  # noqa: E501


        :return: The status of this ServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServiceInstance.


        :param status: The status of this ServiceInstance.  # noqa: E501
        :type: str
        """
        allowed_values = ["NEW", "ACTIVE", "SUSPENDED", "FINISHED", "CANCELLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subscriber_id(self):
        """Gets the subscriber_id of this ServiceInstance.  # noqa: E501


        :return: The subscriber_id of this ServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._subscriber_id

    @subscriber_id.setter
    def subscriber_id(self, subscriber_id):
        """Sets the subscriber_id of this ServiceInstance.


        :param subscriber_id: The subscriber_id of this ServiceInstance.  # noqa: E501
        :type: str
        """

        self._subscriber_id = subscriber_id

    @property
    def subscription(self):
        """Gets the subscription of this ServiceInstance.  # noqa: E501


        :return: The subscription of this ServiceInstance.  # noqa: E501
        :rtype: Subsription
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this ServiceInstance.


        :param subscription: The subscription of this ServiceInstance.  # noqa: E501
        :type: Subsription
        """

        self._subscription = subscription

    @property
    def type(self):
        """Gets the type of this ServiceInstance.  # noqa: E501


        :return: The type of this ServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServiceInstance.


        :param type: The type of this ServiceInstance.  # noqa: E501
        :type: str
        """
        allowed_values = ["ONOFF", "SEAT_BASED", "USAGE_BASED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def version(self):
        """Gets the version of this ServiceInstance.  # noqa: E501


        :return: The version of this ServiceInstance.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServiceInstance.


        :param version: The version of this ServiceInstance.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
