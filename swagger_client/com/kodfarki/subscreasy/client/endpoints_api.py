# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EndpointsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def authorize_using_put(self, authorization, **kwargs):  # noqa: E501
        """authorize  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.authorize_using_put(authorization, async=True)
        >>> result = thread.get()

        :param async bool
        :param Authorization authorization: authorization (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.authorize_using_put_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.authorize_using_put_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def authorize_using_put_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """authorize  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.authorize_using_put_with_http_info(authorization, async=True)
        >>> result = thread.get()

        :param async bool
        :param Authorization authorization: authorization (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method authorize_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `authorize_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'authorization' in params:
            body_params = params['authorization']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/authorize', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deduct_using_put(self, deduction, **kwargs):  # noqa: E501
        """deduct  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.deduct_using_put(deduction, async=True)
        >>> result = thread.get()

        :param async bool
        :param Deduction deduction: deduction (required)
        :return: DeductionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.deduct_using_put_with_http_info(deduction, **kwargs)  # noqa: E501
        else:
            (data) = self.deduct_using_put_with_http_info(deduction, **kwargs)  # noqa: E501
            return data

    def deduct_using_put_with_http_info(self, deduction, **kwargs):  # noqa: E501
        """deduct  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.deduct_using_put_with_http_info(deduction, async=True)
        >>> result = thread.get()

        :param async bool
        :param Deduction deduction: deduction (required)
        :return: DeductionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deduction']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deduct_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deduction' is set
        if ('deduction' not in params or
                params['deduction'] is None):
            raise ValueError("Missing the required parameter `deduction` when calling `deduct_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'deduction' in params:
            body_params = params['deduction']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/deduct', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeductionResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_authorized_services_using_get(self, secure_id, **kwargs):  # noqa: E501
        """getAuthorizedServices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_authorized_services_using_get(secure_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str secure_id: secureId (required)
        :return: AuthorizedServicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_authorized_services_using_get_with_http_info(secure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_authorized_services_using_get_with_http_info(secure_id, **kwargs)  # noqa: E501
            return data

    def get_authorized_services_using_get_with_http_info(self, secure_id, **kwargs):  # noqa: E501
        """getAuthorizedServices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_authorized_services_using_get_with_http_info(secure_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str secure_id: secureId (required)
        :return: AuthorizedServicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['secure_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_authorized_services_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'secure_id' is set
        if ('secure_id' not in params or
                params['secure_id'] is None):
            raise ValueError("Missing the required parameter `secure_id` when calling `get_authorized_services_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'secure_id' in params:
            path_params['secureId'] = params['secure_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/service/subscriber/{secureId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthorizedServicesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_charging_log_by_subscription_using_get(self, id, **kwargs):  # noqa: E501
        """getChargingLogBySubscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_charging_log_by_subscription_using_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: id (required)
        :return: list[ChargingLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_charging_log_by_subscription_using_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_charging_log_by_subscription_using_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_charging_log_by_subscription_using_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """getChargingLogBySubscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_charging_log_by_subscription_using_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: id (required)
        :return: list[ChargingLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_charging_log_by_subscription_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_charging_log_by_subscription_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/charging-logs/subscription/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ChargingLog]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_customer_total_amount_using_get(self, id, **kwargs):  # noqa: E501
        """getCustomerTotalAmount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_customer_total_amount_using_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_customer_total_amount_using_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_customer_total_amount_using_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_customer_total_amount_using_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """getCustomerTotalAmount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_customer_total_amount_using_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_customer_total_amount_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_customer_total_amount_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/customer-totalAmountCharge/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoice_details_using_get(self, invoice_request, **kwargs):  # noqa: E501
        """getInvoiceDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoice_details_using_get(invoice_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param InvoiceRequest invoice_request: invoiceRequest (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_invoice_details_using_get_with_http_info(invoice_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoice_details_using_get_with_http_info(invoice_request, **kwargs)  # noqa: E501
            return data

    def get_invoice_details_using_get_with_http_info(self, invoice_request, **kwargs):  # noqa: E501
        """getInvoiceDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoice_details_using_get_with_http_info(invoice_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param InvoiceRequest invoice_request: invoiceRequest (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_details_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_request' is set
        if ('invoice_request' not in params or
                params['invoice_request'] is None):
            raise ValueError("Missing the required parameter `invoice_request` when calling `get_invoice_details_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'invoice_request' in params:
            body_params = params['invoice_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/getInvoiceDetails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_message_template_using_get(self, lifecycle_event_name, **kwargs):  # noqa: E501
        """getMessageTemplate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_message_template_using_get(lifecycle_event_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str lifecycle_event_name: lifecycleEventName (required)
        :return: MessageTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_message_template_using_get_with_http_info(lifecycle_event_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_message_template_using_get_with_http_info(lifecycle_event_name, **kwargs)  # noqa: E501
            return data

    def get_message_template_using_get_with_http_info(self, lifecycle_event_name, **kwargs):  # noqa: E501
        """getMessageTemplate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_message_template_using_get_with_http_info(lifecycle_event_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str lifecycle_event_name: lifecycleEventName (required)
        :return: MessageTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lifecycle_event_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_message_template_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lifecycle_event_name' is set
        if ('lifecycle_event_name' not in params or
                params['lifecycle_event_name'] is None):
            raise ValueError("Missing the required parameter `lifecycle_event_name` when calling `get_message_template_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lifecycle_event_name' in params:
            path_params['lifecycleEventName'] = params['lifecycle_event_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/message-templates/email/{lifecycleEventName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_instances_by_subscription_using_get(self, id, **kwargs):  # noqa: E501
        """getServiceInstancesBySubscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_service_instances_by_subscription_using_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: id (required)
        :return: list[ServiceInstanceResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_service_instances_by_subscription_using_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_instances_by_subscription_using_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_service_instances_by_subscription_using_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """getServiceInstancesBySubscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_service_instances_by_subscription_using_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: id (required)
        :return: list[ServiceInstanceResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_instances_by_subscription_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_service_instances_by_subscription_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/service-instances/subscription/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ServiceInstanceResult]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_offerings_by_subscription_plan_using_get(self, id, **kwargs):  # noqa: E501
        """getServiceOfferingsBySubscriptionPlan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_service_offerings_by_subscription_plan_using_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: id (required)
        :return: list[ServiceOfferingResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_service_offerings_by_subscription_plan_using_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_offerings_by_subscription_plan_using_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_service_offerings_by_subscription_plan_using_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """getServiceOfferingsBySubscriptionPlan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_service_offerings_by_subscription_plan_using_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: id (required)
        :return: list[ServiceOfferingResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_offerings_by_subscription_plan_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_service_offerings_by_subscription_plan_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/service-offerings/offer/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ServiceOfferingResult]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_total_revenue_per_month_using_get(self, id, **kwargs):  # noqa: E501
        """getTotalRevenuePerMonth  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_total_revenue_per_month_using_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: id (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_total_revenue_per_month_using_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_total_revenue_per_month_using_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_total_revenue_per_month_using_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """getTotalRevenuePerMonth  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_total_revenue_per_month_using_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: id (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_total_revenue_per_month_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_total_revenue_per_month_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/charging-logs-totalamount-customer/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
